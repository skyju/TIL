# 문제:
https://www.acmicpc.net/problem/7490

1부터 N까지의 수를 오름차순으로 쓴 수열 1 2 3 ... N을 생각하자.

그리고 '+'나 '-', 또는 ' '(공백)을 숫자 사이에 삽입하자(+는 더하기, -는 빼기, 공백은 숫자를 이어 붙이는 것을 뜻한다). 이렇게 만든 수식의 값을 계산하고 그 결과가 0이 될 수 있는지를 살피자.

N이 주어졌을 때 수식의 결과가 0이 되는 모든 수식을 찾는 프로그램을 작성하라.

---
# 입력: 
첫 번째 줄에 테스트 케이스의 개수가 주어진다(<10).
각 테스트 케이스엔 자연수 N이 주어진다(3 <= N <= 9).

---
# 출력: 
각 테스트 케이스에 대해 ASCII 순서에 따라 결과가 0이 되는 모든 수식을 출력한다. 각 테스트 케이스의 결과는 한 줄을 띄워 구분한다.

---
# 예제 입력:

예제 입력1
<pre>
2
3
7
</pre>

---
# 예제 출력:

예제 출력1
<pre>
1+2-3

1+2-3+4-5-6+7
1+2-3-4+5+6-7
1-2 3+4+5+6+7
1-2 3-4 5+6 7
1-2+3+4-5+6-7
1-2-3-4-5+6+7
</pre>

---
# 내 제출
~~~java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	static int N;

	public static void main(String[] args) throws NumberFormatException, IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int tc = Integer.parseInt(br.readLine());
		for (int t = 0; t < tc; t++) {
			N = Integer.parseInt(br.readLine());
			// + , -, 이어붙이기 ... dfs
			dfs(1, 1, 0, 1, "1");
			System.out.println();
		}
	}

	public static void dfs(int idx, int num, int sum, int sign, String ans) {
		if (idx == N) {
			sum += num * sign;
			if (sum == 0)
				System.out.println(ans);
			return;
		}

		// 아스키 코드 고려하여 " ", "+", "-" 순으로 dfs
		dfs(idx + 1, num * 10 + (idx + 1), sum, sign, ans + " " + (idx + 1));
		dfs(idx + 1, idx + 1, sum + (num * sign), 1, ans + "+" + (idx + 1));
		dfs(idx + 1, idx + 1, sum + (num * sign), -1, ans + "-" + (idx + 1));

	}

}
~~~
